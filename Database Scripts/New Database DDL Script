--This script will create a database in the MySQL Workbench and use your root and password for this databse.
create table if not exists admin_users
(
    admin_id      int auto_increment
        primary key,
    name          varchar(50)  null,
    username      varchar(50)  null,
    password_hash varchar(100) null,
    role          varchar(20)  null,
    constraint username
        unique (username)
);

create table if not exists courses
(
    course_id     int auto_increment
        primary key,
    course_name   varchar(100)   null,
    description   text           null,
    syllabus      text           null,
    duration      int            null,
    fee_structure decimal(10, 2) null,
    instructors   text           null
);

create table if not exists batches
(
    batch_id    int auto_increment
        primary key,
    course_id   int          null,
    start_date  date         null,
    end_date    date         null,
    schedule    varchar(255) null,
    instructors text         null,
    classroom   varchar(100) null,
    constraint batches_ibfk_1
        foreign key (course_id) references courses (course_id)
);

create index course_id
    on batches (course_id);

create table if not exists exams
(
    exam_id          int auto_increment
        primary key,
    course_id        int         null,
    exam_date        date        null,
    exam_type        varchar(50) null,
    topics           text        null,
    grading_criteria text        null,
    constraint exams_ibfk_1
        foreign key (course_id) references courses (course_id)
);

create table if not exists exam_results
(
    result_id      int auto_increment
        primary key,
    exam_id        int                         null,
    correct_ans    int                         null,
    marks_obtained decimal(5, 2)               null,
    grade          varchar(10)                 null,
    remarks        text                        null,
    user_id        int                         null,
    course_id      int                         null,
    wrong_ans      int                         null,
    unattempted    int                         null,
    total_marks    decimal(5, 2) default 10.00 null,
    average_marks  decimal(5, 2)               null,
    constraint exam_results_courses_course_id_fk
        foreign key (course_id) references courses (course_id),
    constraint exam_results_exams_exam_id_fk
        foreign key (exam_id) references exams (exam_id)
);

create index exam_id
    on exam_results (exam_id);

create index user_id
    on exam_results (user_id);

create index course_id
    on exams (course_id);

create table if not exists instructors
(
    instructor_id int auto_increment
        primary key,
    admin_id      int          null,
    course_id     int          null,
    batch_id      int          null,
    schedule      varchar(255) null,
    classroom     varchar(100) null,
    lecture_notes text         null,
    constraint instructors_ibfk_1
        foreign key (admin_id) references admin_users (admin_id),
    constraint instructors_ibfk_2
        foreign key (course_id) references courses (course_id),
    constraint instructors_ibfk_3
        foreign key (batch_id) references batches (batch_id)
);

create index admin_id
    on instructors (admin_id);

create index batch_id
    on instructors (batch_id);

create index course_id
    on instructors (course_id);

create table if not exists lectures
(
    lecture_id   int auto_increment
        primary key,
    batch_id     int  null,
    lecture_link text null,
    constraint lectures_batches_batch_id_fk
        foreign key (batch_id) references batches (batch_id)
);

create table if not exists logs
(
    log_id    int auto_increment
        primary key,
    admin_id  int                                 null,
    action    varchar(255)                        null,
    timestamp timestamp default CURRENT_TIMESTAMP null,
    details   text                                null,
    constraint logs_ibfk_1
        foreign key (admin_id) references admin_users (admin_id)
);

create index admin_id
    on logs (admin_id);

create table if not exists roles
(
    role_id     int auto_increment
        primary key,
    role_name   varchar(50) null,
    description text        null,
    constraint role_name
        unique (role_name)
);

create table if not exists permissions
(
    permission_id   int auto_increment
        primary key,
    role_id         int         null,
    permission_name varchar(50) null,
    description     text        null,
    constraint permissions_ibfk_1
        foreign key (role_id) references roles (role_id)
);

create index role_id
    on permissions (role_id);

create table if not exists settings
(
    setting_id   int auto_increment
        primary key,
    setting_name varchar(50)  null,
    value        varchar(255) null,
    description  text         null
);

create table if not exists tests
(
    test_id     int          not null,
    course_id   int          null,
    question    varchar(100) null,
    opt_a       text         null,
    opt_b       text         null,
    opt_c       text         null,
    opt_d       text         null,
    correct_ans text         null,
    user_ans    text         null,
    ques_no     int          null,
    constraint tests_ibfk_1
        foreign key (course_id) references courses (course_id)
);

create index course_id
    on tests (course_id);

create index tests_test_id_index
    on tests (test_id);

create table if not exists users
(
    user_id  int auto_increment
        primary key,
    username varchar(50) null,
    password text        null,
    role     varchar(20) null,
    constraint username
        unique (username)
);

create table if not exists attendance
(
    attendance_id int auto_increment
        primary key,
    batch_id      int         null,
    date          date        null,
    status        varchar(20) null,
    remarks       text        null,
    user_id       int         null,
    constraint attendance_ibfk_2
        foreign key (batch_id) references batches (batch_id),
    constraint attendance_ibfk_3
        foreign key (user_id) references users (user_id)
);

create index batch_id
    on attendance (batch_id);

create index user_id
    on attendance (user_id);

create table if not exists doubts
(
    doubt_id  int auto_increment
        primary key,
    course_id int                                 null,
    batch_id  int                                 null,
    question  text                                null,
    answer    text                                null,
    timestamp timestamp default CURRENT_TIMESTAMP null,
    user_id   int                                 null,
    constraint doubts_ibfk_2
        foreign key (course_id) references courses (course_id),
    constraint doubts_ibfk_3
        foreign key (batch_id) references batches (batch_id),
    constraint doubts_ibfk_4
        foreign key (user_id) references users (user_id)
);

create index batch_id
    on doubts (batch_id);

create index course_id
    on doubts (course_id);

create index user_id
    on doubts (user_id);

create table if not exists enrollments
(
    enrollment_id     int auto_increment
        primary key,
    batch_id          int         null,
    enrollment_date   date        null,
    enrollment_status varchar(20) null,
    user_id           int         null,
    course_id         int         null,
    constraint enrollments_courses_course_id_fk
        foreign key (course_id) references courses (course_id),
    constraint enrollments_ibfk_2
        foreign key (batch_id) references batches (batch_id),
    constraint enrollments_ibfk_3
        foreign key (user_id) references users (user_id)
);

create index batch_id
    on enrollments (batch_id);

create index user_id
    on enrollments (user_id);

create table if not exists notifications
(
    notification_id int auto_increment
        primary key,
    message         text       null,
    date_time       datetime   null,
    read_status     tinyint(1) null,
    user_id         int        null,
    constraint notifications_ibfk_2
        foreign key (user_id) references users (user_id)
);

create index user_id
    on notifications (user_id);

create table if not exists payments
(
    payment_id     int auto_increment
        primary key,
    payment_date   date           null,
    amount         decimal(10, 2) null,
    payment_method varchar(50)    null,
    status         varchar(20)    null,
    user_id        int            null,
    constraint payments_ibfk_2
        foreign key (user_id) references users (user_id)
);

create index user_id
    on payments (user_id);

create table if not exists students
(
    name            varchar(50)  null,
    date_of_birth   date         null,
    phone           varchar(20)  null,
    email           varchar(100) null,
    address         varchar(255) null,
    enrollment_date date         null,
    payment_history text         null,
    user_id         int          not null,
    student_id      int auto_increment
        primary key,
    constraint students_pk
        unique (user_id),
    constraint students_ibfk_1
        foreign key (user_id) references users (user_id),
    constraint students_users_user_id_fk
        foreign key (user_id) references users (user_id)
);

